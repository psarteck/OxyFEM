// mesh Th2 = square(10,10,flags=2);

border Gamma1(t=0,3){x=t;y=0;label=1;}
border Gamma2(t=0,3){x=3;y=t;label=2;}
border Gamma3(t=0,3){x=3-t;y=3;label=3;}
border Gamma4(t=0,3){x=0;y=t;label=4;}

int n = 3;
// mesh Th = buildmesh(Gamma1(n)+Gamma2(n)+Gamma3(n)+Gamma4(-n));


int[int] labs = [1, 2, 3, 4];
real x0 = 0;
real x1 = 3;
real y0 = 0;
real y1 = 3;
mesh Th = square(n, n, [x0+(x1-x0)*x, y0+(y1-y0)*y]);

// mesh Th = square(n,n, label=labs, region=0, flags=2);

savemesh(Th, "./Meshs/square3x3.msh");
plot(Th);


//Cube.idp
// load "medit"
// load "msh3"

// func mesh3 Cube (int[int] &NN, real[int, int] &BB, int[int, int] &L){
//     real x0 = BB(0,0), x1 = BB(0,1);
//     real y0 = BB(1,0), y1 = BB(1,1);
//     real z0 = BB(2,0), z1 = BB(2,1);

//     int nx = NN[0], ny = NN[1], nz = NN[2];

//     // 2D mesh
//     mesh Thx = square(nx, ny, [x0+(x1-x0)*x, y0+(y1-y0)*y]);

//     // 3D mesh
//     int[int] rup = [0, L(2,1)], rdown=[0, L(2,0)];
//     int[int] rmid=[1, L(1,0), 2, L(0,1), 3, L(1,1), 4, L(0,0)];
//     mesh3 Th = buildlayers(Thx, nz, zbound=[z0,z1],
//     labelmid=rmid, labelup = rup, labeldown = rdown);

//     return Th;
// }

// int[int] NN = [1,1,1]; //the number of step in each direction
// real [int, int] BB = [[0,1],[0,1],[0,1]]; //the bounding box
// int [int, int] L = [[1,2],[3,4],[5,6]]; //the label of the 6 face left,right, front, back, down, right
// mesh3 Th = Cube(NN, BB, L);
// // plot(Th,ps="test.msh");
// // medit("Th", Th, ps="cube.mesh");

// savemesh(Th, "cube.mesh");



